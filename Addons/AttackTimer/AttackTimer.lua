 local AttackTimer_Eventer = BLibrary("BEvent"); local AttackTimer_Enabled = false; local AttackTimer_LastSpeed = UnitAttackSpeed("player"); function AttackTimer_OnLoad(self) RegisterForSaveFrame(self, self:GetName()); self:SetMinMaxValues(0, 1); self:SetValue(1); end local function AttackTimer_FlashBar() if AttackTimerBar:IsShown() then local _min, _max = AttackTimerBar:GetMinMaxValues(); AttackTimerBar:SetValue(_max); AttackTimerBar:SetStatusBarColor(0, 1, 0); AttackTimerBarSpark:Hide(); AttackTimerBarFlash:SetAlpha(0); AttackTimerBarFlash:Show(); AttackTimerBar.casting = nil; AttackTimerBar.flash = 1; AttackTimerBar.fadeOut = 1; end end local function AttackTimer_OnAttack(parry) local _min, _max = GetTime(); local curTime, mainS,isHands = _min,UnitAttackSpeed("player"); if isHands then return end if (parry and AttackTimerBar.start and AttackTimerBar.stop) then if (not AttackTimerBar:IsVisible()) then return end _min = AttackTimerBar.start; _max = AttackTimerBar.stop; if ((curTime - _min) < 0.6 * mainS) then _max = _max - 0.4 * mainS; end else _max = _min + mainS; end AttackTimerBar:SetStatusBarColor(1, 0.7, 0); AttackTimerBar:SetMinMaxValues(_min, _max); AttackTimerBar:SetValue(curTime); AttackTimerBar:SetAlpha(1); AttackTimerBar.start = _min; AttackTimerBar.stop = _max; AttackTimerBar.casting = 1; AttackTimerBar.fadeOut = nil; AttackTimerBarSpark:Show(); AttackTimerBar:Show(); end function AttackTimer_Eventer:COMBAT_LOG_EVENT_UNFILTERED(...) local timestamp,event,hideCaster,sourceGUID,sourceName,sourceFlags,sourceFlags2,destGUID,destName,destFlags,destFlags2,auraId, auraName = CombatLogGetCurrentEventInfo(); if event == "SWING_MISSED" then if (CombatLog_Object_IsA(sourceFlags,COMBATLOG_FILTER_ME)) then AttackTimer_OnAttack(); elseif (CombatLog_Object_IsA(destFlags,COMBATLOG_FILTER_ME) and auraId == "PARRY") then AttackTimer_OnAttack(true); end elseif event == "SWING_DAMAGE" or event == "SPELL_DAMAGE" or event == "SPELL_MISSED" then if (CombatLog_Object_IsA(sourceFlags,COMBATLOG_FILTER_ME)) then AttackTimer_OnAttack(); end end end function AttackTimer_Eventer:PLAYER_REGEN_ENABLED() AttackTimer_FlashBar(); if AttackTimerBar:IsVisible() then AttackTimerBar:Hide(); end end function AttackTimer_Eventer:UNIT_ATTACK_SPEED() local mainSpeed,isHands = UnitAttackSpeed("player"); if isHands then return end if (mainSpeed ~= AttackTimer_LastSpeed and AttackTimerBar.start) then AttackTimer_LastSpeed = mainSpeed; AttackTimerBar.stop = AttackTimerBar.start + mainSpeed; AttackTimerBar:SetMinMaxValues(AttackTimerBar.start, AttackTimerBar.stop); AttackTimerBar:SetValue(GetTime()); end end function AttackTimer_Eventer:PLAYER_REGEN_DISABLED() if (AttackTimerMove:IsVisible()) then AttackTimerMove:Hide(); end end function AttackTimer_OnUpdate(self) if (not AttackTimer_Enabled) then return; end local _min, _max = AttackTimerBar:GetMinMaxValues(); if self.casting then local status = GetTime(); if status > _max then status = _max; end AttackTimerBarTextRight:SetText(format("%0.1f", _max-status)); AttackTimerBar:SetValue(status); AttackTimerBarFlash:Hide(); local sparkPosition = ((status - _min) / (_max - _min)) * 195; if sparkPosition < 0 then sparkPosition = 0; end AttackTimerBarSpark:SetPoint("CENTER", AttackTimerBar, "LEFT", sparkPosition, 0); if _max - status <= 0 then AttackTimer_FlashBar(); end elseif self.flash then local alpha = AttackTimerBarFlash:GetAlpha(); if alpha < 1 then AttackTimerBarFlash:SetAlpha(alpha); else AttackTimerBarFlash:SetAlpha(1.0); self.flash = nil; end elseif self.fadeOut then local alpha = self:GetAlpha(); if alpha > 0 then self:SetAlpha(alpha); else self.fadeOut = nil; self:Hide(); end end end function AttackTimer_Toggle(switch) if (switch) then AttackTimer_Eventer:RegisterEvent("COMBAT_LOG_EVENT_UNFILTERED"); AttackTimer_Eventer:RegisterEvent("PLAYER_REGEN_ENABLED"); AttackTimer_Eventer:RegisterEvent("UNIT_ATTACK_SPEED"); AttackTimer_Eventer:RegisterEvent("PLAYER_REGEN_DISABLED"); AttackTimer_Enabled = true; else AttackTimer_Eventer:UnregisterAllEvent(); AttackTimer_FlashBar(); AttackTimerMove:Hide(); AttackTimer_Enabled = false; end end function AttackTimer_AjustPosition() if (AttackTimerMove:IsVisible()) then AttackTimerMove:Hide(); AttackTimerBar:Hide(); else AttackTimerMove:Show(); AttackTimerBar:Show(); AttackTimerBar:SetAlpha(1); end end 
